Лекция "Сервер и структура проекта": https://deworker.pro/edu/series/http-framework/project-structure

Мы будем писать как сам фреймворк, так и код демонстрационного приложения, которое будет использовать этот фреймворк.

Весь код мы будем писать на PHP и для этого использовать классическую связку NGINX+PHP-FPM.

Чтобы проверить работу сервера NGINX нам необходима тестовая страница.
Доступные снаружи ресурсы мы будем размещать в папке /public/ в которой создадим файл index.html

---- сохранение в git ---- Демонстрационная HTML-страница

Для настройки табуляции в PHPStorm необходимо перейти в меню File/Settings/Editor/Code Style
и открыть раздел HTML и там настроить табы и кол-во пробелов на замену таба.
Если вы разрабатываете на каком-нибудь FRONTEND-фреймворке, то там принято использовать 2 пробела вместо 4х.
Но настраивать вручную это не всегда удобно.
Если же в команде разные программисты используют несколько IDE-редакторов, то было бы неплохо иметь некий
конфигурационный файл, который бы понимали все редакторы и настраивали среду программирования автоматически.
И такой файл есть. Необходимо в проекте создать файл ".editorconfig" и в нем определить настройки.
Доступные настройки можно посмотреть на сайте editorconfig.org

---- сохранение в git ---- Настройка табуляции с editorconfig

Установка связки NGINX+PHP-FPM
Здесь можно поступить 2мя способами: настроить все вручную или систему виртуализации.
---Недостатки ручной установки
Ручной способ не позволяет разным программистам настроить у себя одинаковую среду разработки, так как могут быть
допущены ошибки, ОС могут быть разными и т.д.
---Использование виртуализации
Виртуализация может быть либо с использованием полноценных виртуальных машин или с использованием легковесных
контейнеров.

Если выбирать путь с использованием виртуальных машин, то мы можем установить на свой компьютер одну из систем
виртуализации, например VirtualBox. Для того, чтобы автоматизировать процесс создания и настройки виртуальной машины мы
можем установить утилиту Vagrant.
Для этого создается конфигурационный файл Vagrantfile в котором описывается какая ОС и какой софт должен быть
установлен.
После чего будет достаточно выполнить команду vagrant up, чтобы все установилось и настроилось автоматически.
---Использование контейнеров
Вместо того, чтобы использовать полноценные виртуальные машины с ОС в последнее время набрал популярность способ с
использованием контейнеров.

Одной из систем контейнеризации является Docker
---Запуск процессов через Docker
В докере можно использовать готовые образы, которые находятся на hub.docker.com
docker run nginx:1.21-alpine nginx

По-умолчанию nginx запускается в качестве демона, но для просмотра этот режим мы можем отключить:
docker run nginx:1.21-alpine nginx -g 'daemon off;'
После этого процесс будет запущен со случайным IP-адресом, узнав который мы можем открыть по нему сайт.
Но это неудобно, нам бы хотелось использовать привычный домен localhost, для этого мы можем пробросить порты:
docker run -p "80:80" nginx:1.21-alpine nginx -g 'daemon off;'
Докер по умолчанию запускается только с тем окружением, которое имеется в образе, а нам бы хотелось использовать свои
файлы. Для этого мы можем подключить виртуальный том, указав, что мы хотим поместить текущую директорию в папку app
докера. Для запуска из консоли необходимо указывать полный путь до подключаемой папки, вместо этого можно
воспользоваться переменной окружения $PWD.
docker run -p "80:80" nginx:1.21-alpine -v "{$PWD}:/app" nginx -g 'daemon off;'
Но это работать не будет так как nginx не настроен на использование нашей папки app. Мы можем пробросить свой
конфигурационный файл через volume или создать свой образ в котором перезаписать конфигурацию сервера.
---Создание своего образа
Если мы хотим создать свой собственный образ, то для содержания всех конфигурационных файлов мы можем создать папку,
например docker.
В ней определить папку nginx, в которой разместить файл Dockerfile в котором описать создание нашего собственного
образа.
В нём указать, что мы берем все файлы из оригинального образа nginx:1.21-alpine
FROM nginx:1.21-alpine
Если мы работаем с NGINX, то у него имеется папка conf.d куда мы можем прокидывать собственные файлы конфигурации.
И мы у себя можем создать такую же папку conf.d и поместить в ней наш файл конфигурации,например default.conf
Теперь, когда мы сделали такую папку и написали свой конфиг, мы можем её скопировать в оригинальное место образа:
COPY ./conf.d /etc/nginx/conf.d
По-умолчанию все команды внутри контейнера работают с корневой директорией / и если мы хотим, чтобы все команды уже
выполнялись из нашей прокинутой папки, то необходимо определить рабочую директорию:
WORKDIR /app

---- сохранение в git ---- Создание своего образа
---Работа с Docker Compose

Чтобы не заниматься вручную запуском различных образов и организации между ними сети удобно использовать отдельную
утилиту под названием Docker Compose.
После установки можно создать файл настроек docker-compose.yml и описать какие сервисы у нас будут.
Сначала мы пишем с какой версией собираемся работать
version: "3.9"
и далее описываем сервисы:
services:
и первым делом говорим, что нам нужен сервис nginx, который мы будем собирать по докерфайлу, который находится в нашей
папке:
services:
  nginx:
    build:
      context: docker/nginx
Также необходимо указать, что нам необходимо прокидывать порт и рабочую папку:
      ports:
        - "80:80"
      volumes:
        - ./:/app
Теперь мы можем создать наши сервисы командой, ключ --pull скачает свежие версии образов, если они есть:
docker-compose build --pull
Теперь мы можем запустить наши сервисы, флаг -d запускает все процессы в фоне:
docker-compose up -d
Готово. Теперь в браузере по адресу localhost будет отображаться страница с нашими данными, которые мы можем менять в
реальном времени.

---- сохранение в git ---- Работа с Docker Compose
